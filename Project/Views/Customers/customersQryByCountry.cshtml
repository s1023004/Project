@model System.Collections.Generic.List<Customers>
@{
    ViewData["Title"] = "客戶資料查詢-By國家別";
    //先轉換動態類型型別 國家別清單List物件
    List<SelectListItem> items = ViewBag.Items as List<SelectListItem>;
}
@*設定前端JavaScript資料*@
@*先判斷有傳遞查詢客戶資料近來Model是存在物件的*@
<style>
    #btnGo{
        background-color: black;
        color: white;
        font-size: 16px;
    }
    .txtCountry{
        background-color:lightcyan;
        color:red;
        font-size:16px;
    }
</style>
@if (Model != null)
{
    <script>        
        //JS陣列 遷入在網頁中設計 Raw() 遷入的架構
        var data = @Html.Raw(Json.Serialize(Model));

    </script>    
}
<script>
    function clickMe(){
            alert(data[0].companyName);
        }
</script>
<fieldset id="result">
    <legend>客戶查詢</legend>
    <form method="post">
        <div>
            <div>國家別</div>
            @Html.DropDownList("country",items)
            <input type="submit" value="查詢" id="btnGo" class="txtCountry btn-danger" />
        </div>
    </form>
    @*v-show控制區塊是否呈現*@
    <fieldset v-show="isShow" id="result">
        <legend>客戶資料</legend>
        <table class="table table-hover">
            <thead>
                <tr>
                    <td>操作</td>
                    <td>客戶編號</td>
                    <td>公司行號</td>
                    <td>聯絡地址</td>
                    <td>連絡電話</td>
                    <td>國家別</td>
                </tr>
            </thead>
            <tbody id="tb">
                @*使用Vue指令進行迴圈與渲染資料*@
                <tr v-for="(item,index) in customers">
                    <td>
                        @*v-bind:attribute="expression" 稱呼單向綁定*@
                        <button class="btn btn-primary" v-bind:accesskey="index" v-on:click="editHandler($event)">編輯</button>
                        <button class="btn btn-danger" v-bind:accesskey="index" v-on:click="deleteHandler">刪除</button>
                    </td>
                    <td>{{item.customerId}}</td>
                    <td>{{item.companyName}}</td>
                    <td>{{item.address}}</td>
                    <td>{{item.phone}}</td>
                    <td>{{item.country}}</td>                    
                </tr>
            </tbody>
        </table>
        <div>記錄數:{{ customers.length }}</div>
    </fieldset>
    @*相對記錄編輯區塊雙向綁定*@
    <div id="dialog" v-show="isDialog">
        <table>
            <tr>
                <td>客戶編號</td>
                <td><input type="text" v-model:value="customer.customerId" readonly/></td>
            </tr>
            <tr>
                <td>公司行號</td>
                <td><input style="width:400px" type="text" v-model:value="customer.companyName" /></td>
            </tr>
            <tr>
                <td>聯絡地址</td>
                <td><input style="width:400px" type="text" v-model:value="customer.address"/></td>
            </tr>
            <tr>
                <td>連絡電話</td>
                <td><input type="text" v-model:value="customer.phone"/></td>
            <tr>
                <td>國家別</td>
                <td><input type="text" v-model:value="customer.country" /></td>
            </tr>
        </table>
        <div style="font-size:18px;color:red">{{updateMessage}}</div>
        <div>公司行號:{{customer.companyName}}</div>
    </div>
    @*刪除相對記錄對話盒*@
    <fieldset id="delDialog" v-show="isDialog">
        <legend>刪除作業</legend>
        <div>客戶編號:{{customer.customerId}}<label></label></div>
        <div><label>公司行號:{{customer.companyName}}</label></div>
        <div class="btn-danger">{{deleteMessage}}</div>
    </fieldset>

</fieldset>
<script>    
    //建構Vue物件
    //網架構子裡面設定模組 {....} 設定JS物件 資料模組/功能模組/Vue物件生命週期Hook
    var app = new Vue(
        //建構子不是使用參數使用JS物件
        {
            //建立Vue資料模組
            data:{
                customers:[], //初始值為空陣列
                message:'',
                isShow:false,
                isDialog:false,
                customer:{}, //選取的相對紀錄
                selectedRow:-1,
                updateMessage:'',//後端更新資料訊息，回應前端狀態
                deleteMessage:'',
                hasDeleted:false
            },
            methods:{
                //聽編輯按鈕引發事件程序
                editHandler:function(e){
                    console.log(e);
                    //取出按鈕accessKey attribute
                    let indexer = e.target.accessKey;
                    console.log(indexer);
                    //從Vue資料模組customers array取出相對編輯的紀錄
                    this.customer = this.customers[indexer];
                    console.log(this.customer);
                    //原先的highLight相對列的CSS 樣式移除
                    $('#tb tr').eq(this.selectedRow).removeClass('btn-primary');
                    //動態相對列選取HighLight 移除前面HightLight
                    //移除原先的獵css class
                    $('#tb tr').eq(indexer).addClass('btn-primary');
                    //這一列要亮起來
                    this.selectedRow=indexer;
                    $('#dialog').dialog(
                        {
                            title:'客戶資料編輯',
                            modal:true,
                            width:600,
                            height:400,

                            buttons:[
                                {
                                    text:'關閉',
                                    class:'btn btn-danger',
                                    click:function(){
                                        $('#dialog').dialog('close');
                                    }
                                },
                                {
                                    text:'更新',
                                    class:'btn btn-success',
                                    click:function(){
                                        //TODO採用AJAX非同步處理 呼喚後端服務
                                        //服務位址(相對位址)
                                        let updateURL = 'customersUpdate';
                                        //1.建構XMLHttpRequest物件
                                        let xhr = new XMLHttpRequest(); 
                                        //聆聽回呼狀態
                                        xhr.onreadystatechange = function()
                                        {
                                            console.log('處理狀態:' + xhr.readyState);//輪詢回應狀態過程
                                            //TODO 到哪一個階段與Http Status取回應資訊
                                            //readyState==4 and Http Status = 200
                                            if(xhr.readyState == 4 && xhr.status == 200)
                                            {
                                                //整個完成回呼資料
                                                let responseData = xhr.responseText;
                                                let msgObj = JSON.parse(responseData);
                                                //不要使用this qjquery物件
                                                app.updateMessage = msgObj.message;
                                                console.log(responseData);

                                            }
                                            else if(xhr.readyState == 4 && xhr.status == 400){
                                                let responseData = xhr.responseText;
                                                console.log(responseData);
                                                let msgObj = JSON.parse(responseData);
                                                //不要使用this qjquery物件
                                                app.updateMessage = msgObj.message;
                                            }
                                            if(xhr.status == 500){
                                                //後端嚴重錯誤
                                                console.log('後端嚴重錯誤');
                                            }
                                        }
                                        xhr.open('PUT',updateURL);
                                        //在Request物件Header加入Content-Type
                                        xhr.setRequestHeader("Content-Type", "application/json");
                                                                                
                                        //正式提出請求
                                        //送出一份Json String
                                        let jsonString = JSON.stringify(app.customer)
                                        xhr.send(jsonString);//正式提出非同步請求                                    

                                    }
                                }
                            ]
                        }
                    )
                },
                //刪除記錄按鈕觸發事件程序
                deleteHandler:function(e){
                    let index = e.target.accessKey;
                    this.customer = this.customers[index];
                    this.hasDeleted = false;
                    //對照Vue陣列取出相對物件編輯物件
                    //相對順序的物件 指派給Vue物件模組customer
                    console.log(this.customer);
                    //使用jQuery Selector
                    $('#delDialog').dialog(
                        {
                            title:'刪除作業',
                            modal:true,
                            //關閉對話盒 引發的事件
                            close: function () {
                                //移除相對紀錄
                                if(app.hasDeleted){
                                    //前端移除相對紀錄
                                    //問出該客戶物件的相對順序
                                    let curIndex = app.customers.indexOf(app.customer);
                                    app.customers.splice(curIndex,1);
                                }
                            },
                            buttons:[
                                {
                                    text:"刪除",
                                    class:"btn btn-danger",
                                    click:function(){
                                        //TODO 採用非同步進行刪除
                                        //使用jQuery selector
                                        //使用JS物件進行非同步設定
                                        //服務位址
                                        let deleteService = 'delete/cid/' + app.customer.customerId + '/rawdata';
                                        let settings = {
                                            url:deleteService,
                                            //傳送方式delete
                                            type:'DELETE',
                                            //後端處理狀態馬2XX 成功回呼
                                            success:function(result,status,xhr){
                                                console.log(result);
                                                app.deleteMessage = result.message;
                                                //進行刪除後的旗標
                                                app.hasDeleted = true;
                                            },
                                            //錯誤回呼 狀態碼4xx or 5xx
                                            error:function(xhr,status,error){
                                                if(xhr.readyState==4 && xhr.status == 400){
                                                    //取出Json內容
                                                    let errorData = xhr.responseJSON;
                                                    console.log(errorData.message);
                                                    app.deleteMessage = errorData.message;
                                                }
                                            }
                                        };
                                        $.ajax(settings);
                                    }
                                },
                                {
                                    text:'關閉',
                                    class:'btn btn-primary',
                                    click:function(){
                                        //選擇器進行
                                        $('#delDialog').dialog('close');
                                    }
                                }
                            ]
                        }
                    )
                }
            },
            //掛載之後引發的事件
            mounted:function(){
                console.log('掛載成功');
                //將JavaScript由後端遷入的JS Array指派Vue物件模組(Model)
                this.customers = data;
                this.isShow=true;
            }
        }
    );
    //掛載要控制的DOM 控制是一個id selector選擇器(selector)#idName
    app.$mount('#result')
</script>
